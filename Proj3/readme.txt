Garrett McDonnell
Algorithms Project 3 - Seam Carving

Compile: g++ Proj3.cpp -o Proj3
Run: ./Proj3 bug.pgm 10 5

First, I read the command line arguments into variables: a string for the name of the input file, an int for the vertical seams to be carved out, and an int for the horizontal seams.  I then read in the file, I read in the initial lines, discarding everything except the value for max intensity (255 in our case) and the numbers for x and y dimensions of the image.  I then read the rest of the file into a 1D vector, convert this into a 2D vector using our x and y dimension values, and return the max intensity.  I then create a new pixel matrix from the old one so as to preserve the original data.  The rest of the program happens in 2 for-loops, the first goes for as many times as the command line argument for vertical seams.  The second goes for the number of horizontal seams to be cut.  Within these, first, I step through the entire pixel matrix, calculate the energy of each pixel, and create an energy matrix from those values.  Then, I create a cumulative energy matrix from those values.  Finally, I find the seam to be cut.  This is done in the vertical cumulative energy matrix, for example, by starting from the bottom row, finding the minimum cumulative energy, and tracing the path up to the top.  I place each [x][y] location of the seam into a vector of pairs.  I then go through the pixel matrix and remove those pixels at the specified location from the vector of pairs.  This is done until the specified number of vertical and horizontal seams have been removed, and then I write the final pixel matrix to a file.


Resubmission Updates:
Logic is the same, but there were 2 bugs I fixed.  Firstly, the major bug was that there was a segmentation fault while reading in the .pgm file.  Essentially, I was using a getline() to reach each line of values from the file, and I was trying to split the line into an array of strings at the delimiter ("space" in this case).  Java and other languages have a nice string member function .Split(), which will do this for you.  I was trying to do it manually, and it worked for the an actual space character, but the tab character "\t" was used for test.pgm, and I did not notice this before.  Ultimately, I just ended up doing "while(file >> value)", so that getting file input value by value is handled for me.  The second bug was a logic error that was much more suddle.  In my function that traces a path for a seam to be removed, found from the minimum cumulative energy matrix, I use a variable "min" which is initialized to the largest 32 bit integer.  As the path is discovered, min should be reset to this value for each loop through the matrix.  However, I was setting min to that value before the loop starts, and when the logic found a new minimum, min would stay that value going into the next loop.  This is not what I wanted, and an incorrect path was sometimes carved out.

I felt that explaining these bug fixes was necessary, due to the fact that my implementation of the algorithm did not change at all.
